{"version":3,"sources":["Actions/hardCodedValues.js","Actions/allTasks.js","Components/addTask/date_time.js","Components/addTask/addTask.jsx","Actions/addTask.js","Actions/updateTask.js","Actions/deleteTask.js","Components/createdTasks/allTasks.jsx","Components/tasks.jsx","App.js","Actions/userDropdown.js","reportWebVitals.js","Reducers/taskDefaultValues.js","Reducers/dropDownList.js","Reducers/allCreatedTasks.js","Reducers/rootReducer.js","index.js"],"names":["hardCoded","allTasks","dispatch","a","options","method","url","headers","axios","userSavedTasks","data","results","forEach","datas","push","sort","b","Date","task_date","getTime","task_time","type","list","console","log","date","initialDate","Number","getDate","month","getMonth","min_date","getFullYear","AddTasks","timeString","dropDown","useSelector","state","defaultTaskValues","useDispatch","value","dateObj","hours","getUTCHours","minutes","getUTCMinutes","toString","padStart","time_seconds","useEffect","document","getElementById","task_msg","assigned_user","length","id","style","visibility","hideAddTasks","display","onSubmit","e","preventDefault","time_zone","is_completed","description","time","user","alert","focus","split","Math","abs","getTimezoneOffset","body","task_body","updateTasks","htmlFor","required","autoComplete","className","min","map","index","name","onClick","window","confirm","AllTasks","props","allTask","src","alt","updatedvalues","editTask","Tasks","numberOfTasks","App","userList","dropDownList","user_status","user_id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialValues","taskDefaultValues","action","allCreatedTask","rootReducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render"],"mappings":"4PAAaA,EACkB,2CADlBA,EAEoB,ykBAFpBA,EAGe,wCAHfA,EAIkB,gI,uBCDlBC,EAAS,yDAAI,WAAMC,GAAN,mBAAAC,EAAA,sEAEdC,EAAU,CACVC,OAAQ,MACRC,IAAI,sFAAD,OAAwFN,GAC3FO,QAAS,CACL,cAAiB,UAAWP,EAC5B,OAAU,mBACV,eAAgB,qBARN,SAWSQ,IAAMJ,GAXf,OAWZK,EAXY,OAYZR,EAAS,GACfQ,EAAeC,KAAKC,QAAQC,SAAQ,SAAAC,GAChCZ,EAASa,KAAKD,MAGlBZ,EAASc,MAAK,SAACZ,EAAEa,GAAH,OAAQ,IAAIC,KAAKd,EAAEe,WAAWC,UAAsB,IAAZhB,EAAEiB,WAAiB,IAAIH,KAAKD,EAAEE,WAAWC,UAAsB,IAAZH,EAAEI,cAC3GlB,EAAS,CAACmB,KAAK,WAAWC,KAAKrB,IAlBb,kDAqBlBsB,QAAQC,IAAR,MArBkB,0DAAJ,uDCHhBC,EAAK,IAAIR,KACXS,EAAYC,OAAOF,EAAKG,WACxBC,EAAMF,OAAOF,EAAKK,YAAY,EAC/BD,EAAM,KACLA,EAAM,IAAIA,GAEXH,EAAY,KACbA,EAAY,IAAIA,GAElB,IAAIK,EAASN,EAAKO,cAAc,IAAIH,EAAM,IAAIH,E,WCA/B,SAASO,IAIpB,IAGIC,EAHEC,EAASC,aAAY,SAAAC,GAAK,OAAEA,EAAMF,YAClCG,EAAkBF,aAAY,SAAAC,GAAK,OAAEA,EAAMC,qBAC3CpC,EAASqC,cAGXL,EAD6B,KAA9BI,EAAkBlB,UDPzB,SAAsBoB,GACd,IAAMC,EAAU,IAAIxB,KAAa,IAARuB,GACnBE,EAAQD,EAAQE,cAChBC,EAAUH,EAAQI,gBACxB,OAAOH,EAAMI,WAAWC,SAAS,EAAG,KAAO,IAAMH,EAAQE,WAAWC,SAAS,EAAG,KCInEC,CAAaV,EAAkBlB,WAGjC,GAIf6B,qBAAU,WACNC,SAASC,eAAe,eAAeX,MAAMF,EAAkBc,SAC/DF,SAASC,eAAe,QAAQX,MAAMF,EAAkBpB,UACxDgC,SAASC,eAAe,QAAQX,MAAMN,EACD,KAAlCI,EAAkBe,cACjBH,SAASC,eAAe,QAAQX,MAAMF,EAAkBe,cAElB,KAAlCf,EAAkBe,eAAsBlB,EAASmB,OAAO,GAC5DJ,SAASC,eAAe,QAAQX,MAAML,EAAS,GAAGoB,GAElDL,SAASC,eAAe,cAAcK,MAAMC,WAAW,UAGvDP,SAASC,eAAe,cAAcK,MAAMC,WAAW,WAE7D,CAACnB,IAKH,IAAMoB,EAAa,WACfR,SAASC,eAAe,YAAYK,MAAMG,QAAQ,OAClDT,SAASC,eAAe,YAAYK,MAAMG,QAAQ,QAClDT,SAASC,eAAe,eAAeX,MAAMF,EAAkBc,SAC/DF,SAASC,eAAe,QAAQX,MAAMF,EAAkBpB,UACxDgC,SAASC,eAAe,QAAQX,MAAMN,EACtCgB,SAASC,eAAe,QAAQX,MAAMU,SAASC,eAAe,QAAQX,OAmE1E,OACI,uBAAMe,GAAG,WAAWK,SAhEC,SAACC,GACtBA,EAAEC,iBACF,IAmBI1C,EACA2C,EACAC,EArBEC,EAAYf,SAASC,eAAe,eACpC1B,EAAKyB,SAASC,eAAe,QAC7Be,EAAKhB,SAASC,eAAe,QAC7BgB,EAAKjB,SAASC,eAAe,QACnC,GAAgB,KAAb1B,EAAKe,MAGJ,OAFA4B,MAAM,oBACN3C,EAAK4C,QAGJ,GAAgB,KAAbH,EAAK1B,MAGT,OAFA4B,MAAM,mBACNF,EAAKG,QAGJ,GAAgB,KAAbF,EAAK3B,MAGT,OAFA4B,MAAM,oBACND,EAAKE,QAQ4B,KAAlC/B,EAAkBe,eACjBjC,EAAU8C,EAAK1B,MAAM8B,MAAM,KAC3BlD,EAAUO,OAAoB,KAAbP,EAAU,IAASO,OAAoB,GAAbP,EAAU,IACrD2C,EAAUQ,KAAKC,IAAmC,IAA/B,IAAIvD,MAAOwD,qBAAwBrD,EACtD4C,EAAa,IAGb5C,EAAUkB,EAAkBlB,UAC5B2C,EAAUzB,EAAkByB,UAC5BC,EAAa1B,EAAkB0B,cAGnC,ICzFeU,EDyFTC,EAAU,CACRtB,cAAerD,EACfkB,UAAUO,EAAKe,MACfpB,UAAUA,EACV4C,aAAaA,EACnBD,UAAUA,EACJX,SAAUa,EAAYzB,OAGO,KAAlCF,EAAkBe,cACjBnD,GCnGWwE,EDmGOC,ECnGR,uCAAQ,WAAMzE,GAAN,iBAAAC,EAAA,sEAElBC,EAAU,CACVC,OAAQ,OACRC,IAAI,sFAAD,OAAwFN,GAC3FO,QAAS,CACL,cAAiB,UAAWP,EAC5B,OAAU,mBACV,eAAgB,oBAEpBU,KAAKgE,GAVa,SAYKlE,IAAMJ,GAZX,OAYhBK,EAZgB,OAatBc,QAAQC,IAAIf,GACZP,EAASD,KAda,gDAiBtBsB,QAAQC,IAAR,MAjBsB,yDAAR,wDDsGVtB,EEtGa,SAACqD,EAAGmB,GAAJ,8CAAW,WAAMxE,GAAN,iBAAAC,EAAA,6DAChCoB,QAAQC,IAAI+B,EAAGmB,GADiB,SAGxBtE,EAAU,CACVC,OAAQ,MACRC,IAAI,2EAAD,OAA6EiD,EAA7E,uBAA8FvD,GACjGO,QAAS,CACL,cAAiB,UAAWP,EAC5B,OAAU,mBACV,eAAgB,oBAEpBU,KAAKgE,GAXmB,SAaDlE,IAAMJ,GAbL,OAatBK,EAbsB,OAc5Bc,QAAQC,IAAIf,GACZP,EAASD,KAfmB,kDAkB5BsB,QAAQC,IAAR,MAlB4B,0DAAX,sDFsGJoD,CAAYtC,EAAkBiB,GAAGoB,IAG9CjB,KAUA,UACQ,gCACI,uBAAOmB,QAAQ,cAAf,8BACA,uBAAOxD,KAAK,OAAOkC,GAAG,cAAcuB,UAAQ,EAACC,aAAa,WAE9D,sBAAKC,UAAU,YAAf,UACI,gCACI,uBAAOH,QAAQ,OAAf,kBACA,uBAAOxD,KAAK,OAAOkC,GAAG,OAAO0B,IAAKlD,OAEtC,gCACI,uBAAO8C,QAAQ,OAAf,kBACA,uBAAOxD,KAAK,OAAOkC,GAAG,eAG9B,gCACI,uBAAOsB,QAAQ,OAAf,yBACA,wBAAQtB,GAAG,OAAX,SACKpB,EAAS+C,KAAI,SAACxE,EAAKyE,GAAN,OAAc,wBAAoB3C,MAAO9B,EAAK6C,GAAhC,SAAqC7C,EAAK0E,MAA7BD,WAGjD,sBAAKH,UAAU,UAAf,UACI,wBAAQ3D,KAAK,SAASkC,GAAG,aAAa8B,QA7BrC,WG5GI,IAAC9B,EH6Gf+B,OAAOC,QAAQ,sCACdrF,GG9GcqD,EH8GOjB,EAAkBiB,GG9G1B,uCAAM,WAAMrD,GAAN,eAAAC,EAAA,6DAC3BoB,QAAQC,IAAI+B,GADe,SAGnBnD,EAAU,CACVC,OAAQ,SACRC,IAAI,2EAAD,OAA6EiD,EAA7E,uBAA8FvD,GACjGO,QAAS,CACL,cAAiB,UAAWP,EAC5B,OAAU,mBACV,eAAgB,qBATD,SAYjBQ,IAAMJ,GAZW,OAavBF,EAASD,KAbc,gDAgBvBsB,QAAQC,IAAR,MAhBuB,yDAAN,wDH+GbkC,MA0BQ,0BACA,gCACI,wBAAQrC,KAAK,SAASgE,QAAS3B,EAA/B,oBACA,wBAAQrC,KAAK,SAAb,2B,MI3IT,SAASmE,EAASC,GAE7B,IAAMC,EAAQtD,aAAY,SAAAC,GAAK,OAAEA,EAAMqD,WACjCxF,EAASqC,cAQf,OACI,qBAAKgB,GAAG,WAAR,SACKmC,EAAQR,KAAI,SAACxE,EAAKyE,GACf,OACI,sBAAiBH,UAAU,cAA3B,UACI,qBAAKW,IAAK3F,EAAsB4F,IAAI,YACpC,sBAAKZ,UAAU,mBAAf,UACI,8BAAMtE,EAAK0C,WACX,8BAAM1C,EAAKQ,eAEf,sBAAKmE,QAAS,kBAhBnB,SAACF,GACZjC,SAASC,eAAe,YAAYK,MAAMG,QAAQ,QAClDT,SAASC,eAAe,YAAYK,MAAMG,QAAQ,OAClDT,SAASC,eAAe,cAAcK,MAAMC,WAAW,UACvDvD,EAAS,CAACmB,KAAK,sBAAsBwE,cAAcH,EAAQP,KAYzBW,CAASX,IAA3B,yBACI,qBAAKH,UAAU,kBAAf,4BAPEG,Q,MCdf,SAASY,IACpB,IAAM7F,EAASqC,cAETyD,EAAc5D,aAAY,SAAAC,GAAK,OAAEA,EAAMqD,WAO7C,OACI,sBAAKnC,GAAG,cAAR,UACI,sBAAKyB,UAAU,aAAf,UACI,2CAAcgB,EAAc1C,UAC5B,sBAAK+B,QATE,WACfnC,SAASC,eAAe,YAAYK,MAAMG,QAAQ,QAClDT,SAASC,eAAe,YAAYK,MAAMG,QAAQ,OAClDzD,EAAS,CAACmB,KAAK,wBAMP,cACI,qBAAK2D,UAAU,yBAAf,2BAGR,cAACQ,EAAD,IACA,cAACvD,EAAD,OCJGgE,MAff,WACE,IAAM/F,EAASqC,cAGf,OAFArC,ECLwB,uCAAI,WAAMA,GAAN,mBAAAC,EAAA,sEAElBC,EAAU,CACVC,OAAQ,MACRC,IAAI,gDAAD,OAAkDN,EAAlD,qBACHO,QAAS,CACL,cAAiB,UAAWP,EAC5B,OAAU,mBACV,eAAgB,qBARF,SAWDQ,IAAMJ,GAXL,OAWhB8F,EAXgB,OAYhBC,EAAa,GACnBD,EAASxF,KAAKC,QAAQD,KAAKE,SAAQ,SAAAC,GACJ,aAApBA,EAAMuF,aACLD,EAAarF,KAAK,CAACsE,KAAKvE,EAAMuE,KAAK7B,GAAG1C,EAAMwF,aAGxDnG,EAAS,CAACmB,KAAK,iBAAiBC,KAAK6E,IAlBf,kDAqBtB5E,QAAQC,IAAR,MArBsB,0DAAJ,uDDMxBtB,EAASD,KAEP,sBAAKsD,GAAG,WAAR,UACE,qBAAKyB,UAAU,YACf,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,WACf,cAACe,EAAD,WEHOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCNRQ,EAAc,CAAC1D,cAAc,GAAKnC,UAAU,GAAKE,UAAU,GAAK2C,UAAU,GAAKX,SAAS,IAW/E4D,EAVS,WAA+B,IAA9B3E,EAA6B,uDAAvB0E,EAAcE,EAAS,uCAClD,OAAOA,EAAO5F,MACV,IAAK,sBACD,OAAO4F,EAAOpB,cAClB,IAAK,qBACD,OAAOkB,EACX,QACI,OAAO1E,ICAJ8D,EARI,WAAoB,IAAnB9D,EAAkB,uDAAZ,GAAG4E,EAAS,uCAClC,OAAOA,EAAO5F,MACV,IAAK,iBACD,OAAO4F,EAAO3F,KAClB,QACI,OAAOe,ICGJ6E,EARM,WAAoB,IAAnB7E,EAAkB,uDAAZ,GAAG4E,EAAS,uCACpC,OAAOA,EAAO5F,MACV,IAAK,WACD,OAAO4F,EAAO3F,KAClB,QACI,OAAOe,ICIJ8E,EALIC,YAAgB,CAC/B9E,kBAAkB0E,EAClB7E,SAASgE,EACTT,QAAQwB,I,QCENG,EAAMC,YAAYH,EAAaI,YAAgBC,MACrDC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFnE,SAASC,eAAe,SAG1BmD,M","file":"static/js/main.6093f45f.chunk.js","sourcesContent":["export const hardCoded={\r\n                    company_id:'company_0336d06ff0ec4b3b9306ddc288482663',\r\n                    access_token:'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MzAxMzAwNjMsIm5iZiI6MTYzMDEzMDA2MywianRpIjoiZDk4MWU5NDctMmQxOC00YjA0LThiMmUtYmU5M2Y3Njk2YjFkIiwiaWRlbnRpdHkiOnsibmFtZSI6Ik1haGkgQ1NLIiwiZW1haWwiOiJnb29kQHRlc3QzLmNvbSIsInVzZXJfaWQiOiJ1c2VyXzQxYzFkNDg1NjRhODQzNWQ4MTU2NDM5OTZkOWEzODhmIiwiaWNvbiI6Imh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci9mZDE3ZDIwNjUwYzk5NTk0YWVmNmQxMjVhMjU5ODdlYT9kZWZhdWx0PWh0dHBzJTNBJTJGJTJGczMuc2xvb3ZpLmNvbSUyRmF2YXRhci1kZWZhdWx0LWljb24ucG5nIiwiYnlfZGVmYXVsdCI6Im91dHJlYWNoIn0sImZyZXNoIjpmYWxzZSwidHlwZSI6ImFjY2VzcyJ9.fDA9Ox6zhBfgDIV_Iz47r2cJF1p3ldHJILuaFlbemTc ',\r\n                    user_id:'user_41c1d48564a8435d815643996d9a388f',\r\n                    default_dp:\"http://www.gravatar.com/avatar/fd17d20650c99594aef6d125a25987ea?default=https%3A%2F%2Fs3.sloovi.com%2Favatar-default-icon.png\"\r\n                }","import axios from 'axios';\r\nimport { hardCoded } from './hardCodedValues';\r\n//allTasks - make api request and sort allTask dispatch allTasks.\r\nexport const allTasks=()=>async(dispatch)=>{\r\n    try{\r\n        let options = {\r\n            method: 'GET',\r\n            url: `https://stage.api.sloovi.com/task/lead_c1de2c7b9ab94cb9abad131b7294cd8b?company_id=${hardCoded.company_id}`,\r\n            headers: {\r\n                'Authorization': 'Bearer '+ hardCoded.access_token,\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n        const userSavedTasks=await axios(options)\r\n        const allTasks=[]\r\n        userSavedTasks.data.results.forEach(datas=>{\r\n            allTasks.push(datas)\r\n        })\r\n        //sort all Task based on date and time.\r\n        allTasks.sort((a,b)=>(new Date(a.task_date).getTime()+a.task_time*1000)-(new Date(b.task_date).getTime()+b.task_time*1000))\r\n        dispatch({type:'allTasks',list:allTasks})\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n}","const date=new Date();\r\nvar initialDate=Number(date.getDate());                   \r\nvar month=Number(date.getMonth())+1;\r\nif(month<10){\r\n    month=\"0\"+month\r\n}\r\nif(initialDate<10){\r\n  initialDate=\"0\"+initialDate;\r\n}\r\nvar min_date=date.getFullYear()+\"-\"+month+\"-\"+initialDate;\r\nfunction time_seconds(value){\r\n        const dateObj = new Date(value * 1000);\r\n        const hours = dateObj.getUTCHours();\r\n        const minutes = dateObj.getUTCMinutes();\r\n        return(hours.toString().padStart(2, '0') + ':' + minutes.toString().padStart(2, '0'))\r\n}\r\n//min_date - hold today's date where the date field's min values should be today in addTask or updateTask.\r\n//time_seconds - convert incoming seconds to time.\r\nexport {min_date,time_seconds};","import axios from 'axios';\r\nimport React, { Component,useEffect } from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { hardCoded } from '../../Actions/hardCodedValues';\r\nimport { addTasks } from '../../Actions/addTask';       //action for addingTask.\r\nimport { updateTasks } from '../../Actions/updateTask'; //action for updatingTask.\r\nimport { deleteTasks } from '../../Actions/deleteTask'; //action for deletingState.\r\nimport { min_date,time_seconds } from './date_time';    //this is some features that be used in our component.\r\n\r\nexport default function AddTasks(){\r\n    //dropDown - get list of options for assigned user field.\r\n    //defaultTaskValues - hold defaultValues for input fields if you perform edit operation.\r\n    //timeString - hold selected time in seconds.\r\n    const dropDown=useSelector(state=>state.dropDown)\r\n    const defaultTaskValues=useSelector(state=>state.defaultTaskValues);\r\n    const dispatch=useDispatch()\r\n    let timeString;\r\n    if(defaultTaskValues.task_time!==\"\"){\r\n        timeString = time_seconds(defaultTaskValues.task_time)\r\n    }\r\n    else{\r\n        timeString=\"\"\r\n    }\r\n    //useEffect - for setting the input field with  defaultvalues.\r\n    //Render everytime the defaultValue is Changed.\r\n    useEffect(()=>{\r\n        document.getElementById('description').value=defaultTaskValues.task_msg;\r\n        document.getElementById('date').value=defaultTaskValues.task_date;\r\n        document.getElementById('time').value=timeString;\r\n        if(defaultTaskValues.assigned_user!==\"\"){\r\n            document.getElementById('user').value=defaultTaskValues.assigned_user;\r\n        }\r\n        else if(defaultTaskValues.assigned_user===\"\" && dropDown.length>0){\r\n            document.getElementById('user').value=dropDown[0].id;\r\n            //show delete icon if editing is performed.\r\n            document.getElementById('deleteTask').style.visibility='hidden';\r\n        }\r\n        else{\r\n            document.getElementById('deleteTask').style.visibility='hidden';\r\n        }\r\n    },[defaultTaskValues])\r\n\r\n    //hideAddTasks - when cancel button is clicked,\r\n    //save the defaultValues of I/P with exist value not changed value of I/P,\r\n    //and show the allTasks and hide the addTask component. \r\n    const hideAddTasks=()=>{\r\n        document.getElementById('addTasks').style.display='none';\r\n        document.getElementById('allTasks').style.display='block';\r\n        document.getElementById('description').value=defaultTaskValues.task_msg;\r\n        document.getElementById('date').value=defaultTaskValues.task_date;\r\n        document.getElementById('time').value=timeString;\r\n        document.getElementById('user').value=document.getElementById('user').value;\r\n    }\r\n    //createOrUpdateTask - when you update or create task,\r\n    //this method perform client side validation and perform sideEffects.\r\n    const createOrUpdateTask=(e)=>{\r\n        e.preventDefault()\r\n        const description=document.getElementById('description');\r\n        const date=document.getElementById('date');\r\n        const time=document.getElementById('time');\r\n        const user=document.getElementById('user')\r\n        if(date.value===\"\"){\r\n            alert('Select Date')\r\n            date.focus()\r\n            return\r\n        }\r\n        else if(time.value===\"\"){\r\n            alert('Enter Time')\r\n            time.focus()\r\n            return\r\n        }\r\n        else if(user.value===\"\"){\r\n            alert('Assign user')\r\n            user.focus()\r\n            return\r\n        }\r\n        let task_time; //hold task time in seconds.\r\n        let time_zone; //hold the time_zone in seconds.\r\n        let is_completed; //0\r\n\r\n        //defaultTaskValues.assigned_user===\"\" means addingTask else updatingTask.\r\n        if(defaultTaskValues.assigned_user===\"\"){\r\n            task_time=time.value.split(':')\r\n            task_time=Number(task_time[0]*3600)+Number(task_time[1]*60)\r\n            time_zone=Math.abs(new Date().getTimezoneOffset()*60)+task_time;\r\n            is_completed=0\r\n        }\r\n        else{\r\n            task_time=defaultTaskValues.task_time;\r\n            time_zone=defaultTaskValues.time_zone\r\n            is_completed=defaultTaskValues.is_completed\r\n        }\r\n        //task_body - body for adding or updating tasks.\r\n        const task_body={\r\n                assigned_user: hardCoded.user_id , \r\n                task_date:date.value,\r\n                task_time:task_time,\r\n                is_completed:is_completed,\r\n\t\t        time_zone:time_zone,\r\n                task_msg: description.value\r\n        }\r\n        //make api request based on action you perform (update/add task). \r\n        if(defaultTaskValues.assigned_user===\"\"){\r\n            dispatch(addTasks(task_body,hideAddTasks))\r\n        }\r\n        else{\r\n            dispatch(updateTasks(defaultTaskValues.id,task_body))\r\n        }\r\n        //hideAddTasks - after action performed move to allTask component.\r\n        hideAddTasks()\r\n    }\r\n    //removeTask - to delete the task.\r\n    const removeTask=()=>{\r\n        if(window.confirm('Are you sure to delete the task?')){\r\n            dispatch(deleteTasks(defaultTaskValues.id))\r\n            hideAddTasks()\r\n        }        \r\n    }\r\n    return(\r\n        <form id='addTasks' onSubmit={createOrUpdateTask}>\r\n                <div>\r\n                    <label htmlFor=\"description\">Task Description</label>\r\n                    <input type='text' id='description' required autoComplete='off'/>\r\n                </div>\r\n                <div className='date_time'>\r\n                    <div>\r\n                        <label htmlFor=\"date\">Date</label>\r\n                        <input type='date' id='date' min={min_date}/>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"time\">Time</label>\r\n                        <input type='time' id='time'/>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"user\">Assign User</label>\r\n                    <select id='user'>\r\n                        {dropDown.map((data,index)=><option key={index} value={data.id}>{data.name}</option>)}\r\n                    </select>\r\n                </div>\r\n                <div className='buttons'>\r\n                    <button type='button' id='deleteTask' onClick={removeTask}>🗑</button>\r\n                    <div>\r\n                        <button type='button' onClick={hideAddTasks}>Cancel</button>\r\n                        <button type='submit'>Save</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n    )\r\n}","import axios from 'axios';\r\nimport { hardCoded } from './hardCodedValues';\r\nimport { allTasks } from './allTasks';\r\n//addTasks - make api request and dispatching allUser() action after adding/updating task.\r\nexport const addTasks=(body)=>async(dispatch)=>{\r\n    try{\r\n        let options = {\r\n            method: 'POST',\r\n            url: `https://stage.api.sloovi.com/task/lead_c1de2c7b9ab94cb9abad131b7294cd8b?company_id=${hardCoded.company_id}`,\r\n            headers: {\r\n                'Authorization': 'Bearer '+ hardCoded.access_token,\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data:body\r\n        };\r\n        const userSavedTasks=await axios(options)\r\n        console.log(userSavedTasks)\r\n        dispatch(allTasks())\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n}","import axios from 'axios';\r\nimport { hardCoded } from './hardCodedValues';\r\nimport { allTasks } from './allTasks';\r\n//updateTasks - for making api request for updating Tasks and dispatch allTask() action.\r\nexport const updateTasks=(id,body)=>async(dispatch)=>{\r\n    console.log(id,body)\r\n    try{\r\n        let options = {\r\n            method: 'PUT',\r\n            url: `https://stage.api.sloovi.com/task/lead_c1de2c7b9ab94cb9abad131b7294cd8b/${id}?company_id=${hardCoded.company_id}`,\r\n            headers: {\r\n                'Authorization': 'Bearer '+ hardCoded.access_token,\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data:body\r\n        };\r\n        const userSavedTasks=await axios(options)\r\n        console.log(userSavedTasks)\r\n        dispatch(allTasks())\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n}","import axios from 'axios';\r\nimport { hardCoded } from './hardCodedValues';\r\nimport { allTasks } from './allTasks';\r\n//deleteTasks - making api request and dispatching allTask() action.\r\nexport const deleteTasks=(id)=>async(dispatch)=>{\r\n    console.log(id)\r\n    try{\r\n        let options = {\r\n            method: 'DELETE',\r\n            url: `https://stage.api.sloovi.com/task/lead_c1de2c7b9ab94cb9abad131b7294cd8b/${id}?company_id=${hardCoded.company_id}`,\r\n            headers: {\r\n                'Authorization': 'Bearer '+ hardCoded.access_token,\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n        await axios(options)\r\n        dispatch(allTasks())\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { hardCoded } from '../../Actions/hardCodedValues'; //contain token,user_id,company_id.\r\nimport './allTasks.css';\r\n\r\nexport default function AllTasks(props){\r\n    //allTask - get all tasks from store.\r\n    const allTask=useSelector(state=>state.allTask)\r\n    const dispatch=useDispatch()\r\n    //editTask - when Edit button is clicked we need to show addTask component with defaultValues.\r\n    const editTask=(index)=>{\r\n        document.getElementById('addTasks').style.display='block';\r\n        document.getElementById('allTasks').style.display='none';\r\n        document.getElementById('deleteTask').style.visibility='visible';\r\n        dispatch({type:'updateDefaultValues',updatedvalues:allTask[index]}) //dispatch for store to hold selected task datas.\r\n    }\r\n    return(\r\n        <div id='allTasks'>\r\n            {allTask.map((data,index)=>{\r\n                return(\r\n                    <div key={index} className='taskDetails'>\r\n                        <img src={hardCoded.default_dp} alt=\"user_dp\"/>\r\n                        <div className='date_description'>\r\n                            <div>{data.task_msg}</div>\r\n                            <div>{data.task_date}</div>\r\n                        </div>\r\n                        <div onClick={()=>editTask(index)}>🖉\r\n                            <div className='editTaskToolTip'>Edit Task</div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React, { Component,useState } from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport AddTasks from './addTask/addTask';       //AddTask Component.\r\nimport AllTasks from './createdTasks/allTasks'; //AllTasks Component.\r\nimport './tasks.css';\r\n\r\nexport default function Tasks(){\r\n    const dispatch=useDispatch()\r\n    //numberOfTasks - get all the created tasks from store.\r\n    const numberOfTasks=useSelector(state=>state.allTask)\r\n    //showAddTasks - when createTask button clicked we need to show AddTask Component.\r\n    const showAddTasks=()=>{\r\n        document.getElementById('addTasks').style.display='block';\r\n        document.getElementById('allTasks').style.display='none';\r\n        dispatch({type:'setToDefaultValues'}) //In AddTask Component defaultValue of all input field is none.\r\n    }\r\n    return(\r\n        <div id='taskSection'>\r\n            <div className='taskHeader'>\r\n                <div>TASKS - {numberOfTasks.length}</div>\r\n                <div onClick={showAddTasks}>+\r\n                    <div className='toolTip addTaskToolTip'>AddTask</div>\r\n                </div>\r\n            </div>\r\n            <AllTasks/>\r\n            <AddTasks/>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Tasks from './Components/tasks';\nimport {useDispatch} from 'react-redux'; //for Dispatch action to change state.\nimport {userDropDown} from './Actions/userDropdown'; //this action perform async action and get list of users in dropdown.\nimport {allTasks} from './Actions/allTasks';//this action perform async action to get all tasks.\n\nfunction App() {\n  const dispatch=useDispatch()\n  dispatch(userDropDown())     //Dispatch userDropDown() action to get list of users in dropdown and save it in store.\n  dispatch(allTasks())         //Dispatch allTasks() action to get all created tasks and save it in store and visible to user.\n  return (\n    <div id='homePage'>\n      <div className='sideBar'></div>\n      <div className='mainSection'>\n        <div className='topBar'></div>\n        <Tasks/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\r\nimport { hardCoded } from './hardCodedValues';\r\n//userDropDown - this action for getting userDown.\r\nexport const userDropDown=()=>async(dispatch)=>{\r\n    try{\r\n        let options = {\r\n            method: 'GET',\r\n            url: `https://stage.api.sloovi.com/team?company_id=${hardCoded.company_id}&product=outreach`,\r\n            headers: {\r\n                'Authorization': 'Bearer '+ hardCoded.access_token,\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n        const userList=await axios(options)\r\n        const dropDownList=[]\r\n        userList.data.results.data.forEach(datas=>{\r\n                if(datas.user_status==='accepted'){\r\n                    dropDownList.push({name:datas.name,id:datas.user_id})\r\n                }\r\n        })\r\n        dispatch({type:'updateDropDown',list:dropDownList})\r\n    }\r\n    catch(err){\r\n        console.log(err)\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//taskDefaultValues - this reducer for setting defaultvalue to I/P field.\r\nconst initialValues={assigned_user:\"\" , task_date:\"\" , task_time:\"\" , time_zone:\"\" , task_msg:\"\"}\r\nconst taskDefaultValues=(state=initialValues,action)=>{\r\n    switch(action.type){\r\n        case 'updateDefaultValues':\r\n            return action.updatedvalues\r\n        case 'setToDefaultValues':\r\n            return initialValues\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default taskDefaultValues;","//this reducer for setting the dropDown.\r\nconst dropDownList=(state=[],action)=>{\r\n    switch(action.type){\r\n        case 'updateDropDown':\r\n            return action.list\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default dropDownList;","//this reducer for setting allTasks.\r\nconst allCreatedTask=(state=[],action)=>{\r\n    switch(action.type){\r\n        case 'allTasks':\r\n            return action.list\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default allCreatedTask;","import {combineReducers} from 'redux';\r\nimport taskDefaultValues from './taskDefaultValues';\r\nimport dropDownList from './dropDownList';\r\nimport allCreatedTask from './allCreatedTasks';\r\n\r\nconst rootReducers=combineReducers({\r\n    defaultTaskValues:taskDefaultValues,\r\n    dropDown:dropDownList,\r\n    allTask:allCreatedTask\r\n})\r\nexport default rootReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {createStore,applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducers from './Reducers/rootReducer';\nimport thunk from 'redux-thunk'; //for Performing async action in actionCreator\n\nconst store=createStore(rootReducers,applyMiddleware(thunk))\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}